{"remainingRequest":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\babel-loader\\lib\\index.js!E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\src\\view\\Main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\src\\view\\Main.vue","mtime":1651831608939},{"path":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\用户交互技术HCI\\GitHubProject\\vuePanorama-master\\vuePanorama-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport * as THREE from \"three\";\nimport * as TrackballControls from 'three-trackballcontrols';\nimport * as ThreeStats from 'three-stats';\nimport { OBJLoader, MTLLoader } from 'three-obj-mtl-loader';\n\nvar OrbitControls = require('three-orbit-controls')(THREE);\n\nexport default {\n  props: {\n    msg: String\n  },\n  data: function data() {\n    return {\n      renderer: '',\n      //渲染器\n      scene: '',\n      //场景\n      light: '',\n      //光源\n      camera: '',\n      //相机\n      controls: '',\n      //控制器\n      stats: '',\n      //性能监控器\n      mygroup: '',\n      //模型组\n      action: '',\n      //控制动画的值\n      clock: '',\n      //时钟\n      mixer: '',\n      //混合实例\n      rotateAnimate: '',\n      //旋转动画\n      isRotate: 1 //是否开启旋转\n\n    };\n  },\n  mounted: function mounted() {\n    this.init(); //初始化\n  },\n  methods: {\n    init: function init() {\n      this.$refs.threeDom.addEventListener('dblclick', this.onMouseDblclick); //监听双击事件\n\n      this.rendererInit(); //创建渲染器\n\n      this.sceneInit(); //创建场景    包含光源和辅助坐标系\n\n      this.cameraInit(); //创建相机\n\n      this.controlInit(); //初始化控制器\n\n      this.propertyInit(); //性能监控\n\n      this.modelling(); //建立模型\n    },\n    modelling: function modelling() {\n      //开始建立模型\n      this.mygroup = new THREE.Group();\n      var textureLoader = new THREE.TextureLoader(); //创建纹理贴图\t\t\n      //从服务器上取得图片\n      // var link='http://192.168.0.170:9001/haems-web/modules/web/images/%E6%AD%A3%E9%9D%A2.png';\t\n      //vue加载图表需要用 require形式 从本地取,直接取本地是无法应用上的因为load只支持http协议 打包后变为file协议是无法使用的\n      //所以必须取服务上的图片 然后在vue.config中配置跨域\n\n      var img = textureLoader.load(require('@/assets/img/home3.jpg')); //var img = textureLoader.load(link); //vue加载图表需要用 require形式\n\n      var geometry = new THREE.SphereGeometry(130, 256, 256); // 球体网格模型\n\n      var material = new THREE.MeshLambertMaterial({\n        map: img,\n        //设置颜色贴图属性值\n        side: THREE.DoubleSide //双面渲染\n\n      });\n      var meshSphere = new THREE.Mesh(geometry, material); //网格模型对象Mesh\t\n\n      meshSphere.name = '球体容器';\n      this.mygroup.add(meshSphere);\n      var canvasText = this.getcanvers('进门'); //生成一个canvers 文字图案对象\n\n      var texture = new THREE.CanvasTexture(canvasText);\n      var geometryText = new THREE.PlaneGeometry(16, 10, 60, 60);\n      var materialText = new THREE.MeshPhongMaterial({\n        map: texture,\n        // 设置纹理贴图\n        side: THREE.DoubleSide //双面渲染\n\n      });\n      var meshText = new THREE.Mesh(geometryText, materialText);\n      meshText.name = '进门';\n      meshText.position.set(40, 20, -90);\n      this.mygroup.add(meshText);\n      this.scene.add(this.mygroup);\n      this.addAnimation(); //添加并开启动画\n\n      this.refresh();\n    },\n    isSpin: function isSpin(val) {\n      //开启和关闭旋转\n      if (val == 0) {\n        //关闭控制台\t\t\n        this.action.paused = true;\n      } else {\n        this.action.paused = false;\n      }\n    },\n    addAnimation: function addAnimation() {\n      //添加并开启动画\n      this.clock = new THREE.Clock(); // three.js 时钟对象\n\n      var times = [0, 3600]; //\t创建帧动画序列\n\n      var position_x = [0, 360]; //离散属性值\n\n      var keyframe = new THREE.KeyframeTrack('meshSphere.rotation[y]', times, position_x);\n      var duration = 100; //持续时间\n\n      var cilp = new THREE.AnimationClip('sphereRotate', duration, [keyframe]); //剪辑 keyframe对象\n\n      this.mixer = new THREE.AnimationMixer(this.mygroup); //动画混合实例\n\n      this.action = this.mixer.clipAction(cilp);\n      this.action.timeScale = 1; //播放速度\n\n      this.action.setLoop(THREE.LoopPingPong).play(); //开始播放 像乒乓球一样在起始点与结束点之间来回循环\n\n      this.animate(); //开启动画\n    },\n    animate: function animate() {\n      //循环渲染\n      this.rotateAnimate = requestAnimationFrame(this.animate);\n      this.renderer.render(this.scene, this.camera);\n      this.update();\n    },\n    update: function update() {\n      //数据更新\n      this.stats.update();\n      this.mixer.update(this.clock.getDelta());\n    },\n    rendererInit: function rendererInit() {\n      //初始化渲染器\n      var width = 1000; //窗口宽度\n\n      var height = 800; //窗口高度\n\n      this.renderer = new THREE.WebGLRenderer(); //创建渲染器\n\n      this.renderer.setClearColor(0xffffff); //添加背景颜色\n\n      this.renderer.setSize(width, height); // 设定渲染器尺寸\n\n      this.$refs.threeDom.appendChild(this.renderer.domElement);\n    },\n    sceneInit: function sceneInit() {\n      //初始化场景 并向场景添加光源和辅助坐标系\n      this.scene = new THREE.Scene();\n      var ambient = new THREE.AmbientLight(0x444444, 3); //添加光源  颜色和光照强度\n\n      var axisHelper = new THREE.AxesHelper(600); //添加辅助坐标系\n\n      axisHelper.visible = false; // 新加的\n\n      this.scene.add(ambient, axisHelper);\n    },\n    cameraInit: function cameraInit() {\n      //初始化相机\n      var width = 800; //窗口宽度\n\n      var height = 800; //窗口高度\n\n      this.camera = new THREE.PerspectiveCamera(90, width / height, 1, 1000); //使用透视相机\n\n      this.camera.position.set(0, 0, 10); //设置相机位置\n\n      this.camera.lookAt(new THREE.Vector3(0, 0, 0)); // 相机看向\n    },\n    controlInit: function controlInit() {\n      //初始化控制器\n      this.controls = new OrbitControls(this.camera, this.$refs.threeDom); // 初始化控制器\n\n      this.controls.target.set(0, 0, 0); // 设置控制器的焦点，使控制器围绕这个焦点进行旋转\n\n      this.controls.minDistance = 10; // 设置移动的最短距离（默认为零）\n\n      this.controls.maxPolarAngle = Math.PI; //绕垂直轨道的距离（范围是0-Math.PI,默认为Math.PI）\n\n      this.controls.maxDistance = 30; // 设置移动的最长距离（默认为无穷）\n\n      this.controls.enablePan = false; //禁用右键功能\n\n      this.controls.addEventListener('change', this.refresh); //监听鼠标、键盘事件 让整个控件可以拖动\n    },\n    propertyInit: function propertyInit() {\n      //初始化性能监控\n      this.stats = new ThreeStats.Stats(); // 创建一个性能监视器\t\n\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = '-4px';\n      this.$refs.property.appendChild(this.stats.dom);\n      this.stats.update();\n    },\n    getcanvers: function getcanvers(text) {\n      //生成一个canvers图案\n      var canvasText = document.createElement(\"canvas\");\n      var c = canvasText.getContext('2d'); // 矩形区域填充背景\n\n      c.fillStyle = \"#FFFFFF\"; //canver背景\n\n      c.fillRect(0, 0, 300, 200); //生成一个矩形\n\n      c.translate(160, 80);\n      c.fillStyle = \"#000000\"; //文本填充颜色\n\n      c.font = \"bold 100px 宋体\"; //字体样式设置\n\n      c.textBaseline = \"middle\"; //文本与\n\n      c.textAlign = \"center\"; //文本居中\n\n      c.fillText(text, 0, 0);\n      var texture = new THREE.CanvasTexture(canvasText); //Canvas纹理\n\n      var geometryText = new THREE.PlaneGeometry(16, 10, 60, 60); //生成一个矩形平面\n\n      var materialText = new THREE.MeshPhongMaterial({\n        map: texture,\n        // 设置纹理贴图\n        side: THREE.DoubleSide //双面渲染\n\n      });\n      var meshText = new THREE.Mesh(geometryText, materialText);\n      meshText.name = text;\n      meshText.position.set(40, 20, -90);\n      return canvasText;\n    },\n    refresh: function refresh() {\n      //刷新页面 \n      this.renderer.render(this.scene, this.camera); //执行渲染操作\n\n      this.stats.update(); //更新性能监控的值\t\t\t\n    },\n    onMouseDblclick: function onMouseDblclick(event) {\n      var _this = this;\n\n      //触发双击事件\n      // 获取 raycaster 和所有模型相交的数组，其中的元素按照距离排序，越近的越靠前\n      var intersects = this.getIntersects(event);\n\n      if (intersects.length != 0) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = intersects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            if (item.object.name != '') {\n              //找到第一个不等于空的模型 就是自定义最近的模型\n              this.action.paused = true; //停止旋转\t\t\t\n\n              this.$confirm('是否切换场景?', '提示', {\n                confirmButtonText: '切换',\n                cancelButtonText: '取消',\n                type: 'warning'\n              }).then(function () {\n                _this.action.paused = false; //开启旋转\n\n                if (item.object.name == '进门') {\n                  _this.changeScene('enter'); //改变页面场景\n\n                } else if (item.object.name == '返回') {\n                  _this.changeScene('backtrack'); //改变页面场景\n\n                }\n              }).catch(function () {\n                _this.action.paused = false; //开启旋转\n              });\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {//这里是未选中状态\n      }\n    },\n    changeScene: function changeScene(type) {\n      var _this2 = this;\n\n      var img = '';\n      var names = '';\n      var canvasText = '';\n      var textureLoader = new THREE.TextureLoader(); //创建纹理贴图\t\t\n\n      if (type == 'enter') {\n        img = textureLoader.load(require(\"@/assets/img/home1.jpg\")); //vue加载图表需要用 require形式\n\n        canvasText = this.getcanvers('返回'); //生成一个canvers 文字图案对象\t\n\n        names = '返回';\n      } else if (type == 'backtrack') {\n        //返回房间\n        img = textureLoader.load(require(\"@/assets/img/home3.jpg\")); //vue加载图表需要用 require形式\t\n\n        canvasText = this.getcanvers('进门'); //生成一个canvers 文字图案对象\t\n\n        names = '进门';\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.scene.children[2].children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.name == '球体容器') {\n            //切换贴图 进入下一张贴图\t\t\t\t\t\n            var material = new THREE.MeshLambertMaterial({\n              map: img,\n              //设置颜色贴图属性值\n              side: THREE.DoubleSide //双面渲染\n\n            });\n            item.material = material;\n          } else if (item.name == '进门' || item.name == '返回') {\n            var texture = new THREE.CanvasTexture(canvasText);\n            var materialText = new THREE.MeshPhongMaterial({\n              map: texture,\n              // 设置纹理贴图\n              side: THREE.DoubleSide //双面渲染\n\n            });\n            item.name = names; //改名模型的名字\n\n            item.material = materialText;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      setTimeout(function () {\n        //延迟刷新\n        _this2.refresh();\n      }, 100);\n    },\n    getIntersects: function getIntersects(event) {\n      // 获取与射线相交的对象数组\n      event.preventDefault(); // 声明 raycaster 和 mouse 变量\n\n      var raycaster = new THREE.Raycaster(); //生成射线\n\n      var mouse = new THREE.Vector2();\n      var container = this.$refs.threeDom;\n      var getBoundingClientRect = container.getBoundingClientRect(); // 通过鼠标点击位置,计算出 raycaster 所需点的位置 分量,以屏幕为中心点,范围 -1 到 1\n\n      mouse.x = (event.clientX - getBoundingClientRect.left) / container.offsetWidth * 2 - 1;\n      mouse.y = -((event.clientY - getBoundingClientRect.top) / container.offsetHeight) * 2 + 1; //通过鼠标点击的位置(二维坐标)和当前相机的矩阵计算出射线位置\n\n      raycaster.setFromCamera(mouse, this.camera); // 获取与射线相交的对象数组，其中的元素按照距离排序，越近的越靠前\n\n      var intersects = raycaster.intersectObjects(this.scene.children[2].children); //返回选中的对象\n\n      return intersects;\n    }\n  }\n};",{"version":3,"sources":["Main.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,KAAA,MAAA,OAAA;AACA,OAAA,KAAA,iBAAA,MAAA,yBAAA;AACA,OAAA,KAAA,UAAA,MAAA,aAAA;AACA,SAAA,SAAA,EAAA,SAAA,QAAA,sBAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,sBAAA,CAAA,CAAA,KAAA,CAAA;;AAEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AACA;AACA,MAAA,KAAA,EAAA,EAFA;AAEA;AACA,MAAA,KAAA,EAAA,EAHA;AAGA;AACA,MAAA,MAAA,EAAA,EAJA;AAIA;AACA,MAAA,QAAA,EAAA,EALA;AAKA;AACA,MAAA,KAAA,EAAA,EANA;AAMA;AACA,MAAA,OAAA,EAAA,EAPA;AAOA;AAEA,MAAA,MAAA,EAAA,EATA;AASA;AACA,MAAA,KAAA,EAAA,EAVA;AAUA;AACA,MAAA,KAAA,EAAA,EAXA;AAWA;AACA,MAAA,aAAA,EAAA,EAZA;AAYA;AACA,MAAA,QAAA,EAAA,CAbA,CAaA;;AAbA,KAAA;AAgBA,GArBA;AAuBA,EAAA,OAvBA,qBAuBA;AACA,SAAA,IAAA,GADA,CACA;AACA,GAzBA;AA2BA,EAAA,OAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,UAAA,EAAA,KAAA,eAAA,EADA,CACA;;AACA,WAAA,YAAA,GAFA,CAEA;;AACA,WAAA,SAAA,GAHA,CAGA;;AACA,WAAA,UAAA,GAJA,CAIA;;AACA,WAAA,WAAA,GALA,CAKA;;AACA,WAAA,YAAA,GANA,CAMA;;AACA,WAAA,SAAA,GAPA,CAOA;AACA,KATA;AAWA,IAAA,SAXA,uBAWA;AAAA;AACA,WAAA,OAAA,GAAA,IAAA,KAAA,CAAA,KAAA,EAAA;AAEA,UAAA,aAAA,GAAA,IAAA,KAAA,CAAA,aAAA,EAAA,CAHA,CAGA;AACA;AACA;AACA;AACA;;AACA,UAAA,GAAA,GAAA,aAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,CARA,CASA;;AAEA,UAAA,QAAA,GAAA,IAAA,KAAA,CAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAXA,CAWA;;AACA,UAAA,QAAA,GAAA,IAAA,KAAA,CAAA,mBAAA,CAAA;AACA,QAAA,GAAA,EAAA,GADA;AACA;AACA,QAAA,IAAA,EAAA,KAAA,CAAA,UAFA,CAEA;;AAFA,OAAA,CAAA;AAIA,UAAA,UAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,QAAA,EAAA,QAAA,CAAA,CAhBA,CAgBA;;AACA,MAAA,UAAA,CAAA,IAAA,GAAA,MAAA;AACA,WAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AAEA,UAAA,UAAA,GAAA,KAAA,UAAA,CAAA,IAAA,CAAA,CApBA,CAoBA;;AACA,UAAA,OAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA;AACA,UAAA,YAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AACA,UAAA,YAAA,GAAA,IAAA,KAAA,CAAA,iBAAA,CAAA;AACA,QAAA,GAAA,EAAA,OADA;AACA;AACA,QAAA,IAAA,EAAA,KAAA,CAAA,UAFA,CAEA;;AAFA,OAAA,CAAA;AAIA,UAAA,QAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,YAAA,EAAA,YAAA,CAAA;AACA,MAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,MAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA;AACA,WAAA,OAAA,CAAA,GAAA,CAAA,QAAA;AAEA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,OAAA;AACA,WAAA,YAAA,GAjCA,CAiCA;;AACA,WAAA,OAAA;AACA,KA9CA;AAgDA,IAAA,MAhDA,kBAgDA,GAhDA,EAgDA;AAAA;AACA,UAAA,GAAA,IAAA,CAAA,EAAA;AAAA;AACA,aAAA,MAAA,CAAA,MAAA,GAAA,IAAA;AACA,OAFA,MAEA;AACA,aAAA,MAAA,CAAA,MAAA,GAAA,KAAA;AACA;AACA,KAtDA;AAwDA,IAAA,YAxDA,0BAwDA;AAAA;AACA,WAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,EAAA,CADA,CACA;;AACA,UAAA,KAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,CAFA,CAEA;;AACA,UAAA,UAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAHA,CAGA;;AACA,UAAA,QAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,KAAA,EAAA,UAAA,CAAA;AACA,UAAA,QAAA,GAAA,GAAA,CALA,CAKA;;AACA,UAAA,IAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA,QAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CANA,CAMA;;AACA,WAAA,KAAA,GAAA,IAAA,KAAA,CAAA,cAAA,CAAA,KAAA,OAAA,CAAA,CAPA,CAOA;;AACA,WAAA,MAAA,GAAA,KAAA,KAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,WAAA,MAAA,CAAA,SAAA,GAAA,CAAA,CATA,CASA;;AACA,WAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,YAAA,EAAA,IAAA,GAVA,CAUA;;AACA,WAAA,OAAA,GAXA,CAWA;AACA,KApEA;AAsEA,IAAA,OAtEA,qBAsEA;AAAA;AACA,WAAA,aAAA,GAAA,qBAAA,CAAA,KAAA,OAAA,CAAA;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,KAAA,KAAA,EAAA,KAAA,MAAA;AACA,WAAA,MAAA;AACA,KA1EA;AA4EA,IAAA,MA5EA,oBA4EA;AAAA;AACA,WAAA,KAAA,CAAA,MAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,KAAA,KAAA,CAAA,QAAA,EAAA;AACA,KA/EA;AAiFA,IAAA,YAjFA,0BAiFA;AAAA;AACA,UAAA,KAAA,GAAA,IAAA,CADA,CACA;;AACA,UAAA,MAAA,GAAA,GAAA,CAFA,CAEA;;AACA,WAAA,QAAA,GAAA,IAAA,KAAA,CAAA,aAAA,EAAA,CAHA,CAGA;;AACA,WAAA,QAAA,CAAA,aAAA,CAAA,QAAA,EAJA,CAIA;;AACA,WAAA,QAAA,CAAA,OAAA,CAAA,KAAA,EAAA,MAAA,EALA,CAKA;;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,KAAA,QAAA,CAAA,UAAA;AACA,KAxFA;AA0FA,IAAA,SA1FA,uBA0FA;AAAA;AACA,WAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA,KAAA,CAAA,YAAA,CAAA,QAAA,EAAA,CAAA,CAAA,CAFA,CAEA;;AACA,UAAA,UAAA,GAAA,IAAA,KAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAHA,CAGA;;AACA,MAAA,UAAA,CAAA,OAAA,GAAA,KAAA,CAJA,CAIA;;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,OAAA,EAAA,UAAA;AACA,KAhGA;AAkGA,IAAA,UAlGA,wBAkGA;AAAA;AACA,UAAA,KAAA,GAAA,GAAA,CADA,CACA;;AACA,UAAA,MAAA,GAAA,GAAA,CAFA,CAEA;;AACA,WAAA,MAAA,GAAA,IAAA,KAAA,CAAA,iBAAA,CAAA,EAAA,EAAA,KAAA,GAAA,MAAA,EAAA,CAAA,EAAA,IAAA,CAAA,CAHA,CAGA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAJA,CAIA;;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EALA,CAKA;AACA,KAxGA;AA0GA,IAAA,WA1GA,yBA0GA;AAAA;AACA,WAAA,QAAA,GAAA,IAAA,aAAA,CAAA,KAAA,MAAA,EAAA,KAAA,KAAA,CAAA,QAAA,CAAA,CADA,CACA;;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAFA,CAEA;;AACA,WAAA,QAAA,CAAA,WAAA,GAAA,EAAA,CAHA,CAGA;;AACA,WAAA,QAAA,CAAA,aAAA,GAAA,IAAA,CAAA,EAAA,CAJA,CAIA;;AACA,WAAA,QAAA,CAAA,WAAA,GAAA,EAAA,CALA,CAKA;;AACA,WAAA,QAAA,CAAA,SAAA,GAAA,KAAA,CANA,CAMA;;AACA,WAAA,QAAA,CAAA,gBAAA,CAAA,QAAA,EAAA,KAAA,OAAA,EAPA,CAOA;AACA,KAlHA;AAoHA,IAAA,YApHA,0BAoHA;AAAA;AACA,WAAA,KAAA,GAAA,IAAA,UAAA,CAAA,KAAA,EAAA,CADA,CACA;;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,GAAA,UAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,GAAA,MAAA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,KAAA,KAAA,CAAA,GAAA;AACA,WAAA,KAAA,CAAA,MAAA;AACA,KA1HA;AA4HA,IAAA,UA5HA,sBA4HA,IA5HA,EA4HA;AAAA;AACA,UAAA,UAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,UAAA,CAAA,GAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAGA;;AACA,MAAA,CAAA,CAAA,SAAA,GAAA,SAAA,CAJA,CAIA;;AACA,MAAA,CAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EALA,CAKA;;AACA,MAAA,CAAA,CAAA,SAAA,CAAA,GAAA,EAAA,EAAA;AACA,MAAA,CAAA,CAAA,SAAA,GAAA,SAAA,CAPA,CAOA;;AACA,MAAA,CAAA,CAAA,IAAA,GAAA,eAAA,CARA,CAQA;;AACA,MAAA,CAAA,CAAA,YAAA,GAAA,QAAA,CATA,CASA;;AACA,MAAA,CAAA,CAAA,SAAA,GAAA,QAAA,CAVA,CAUA;;AACA,MAAA,CAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA;AAEA,UAAA,OAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CAbA,CAaA;;AACA,UAAA,YAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CAdA,CAcA;;AACA,UAAA,YAAA,GAAA,IAAA,KAAA,CAAA,iBAAA,CAAA;AACA,QAAA,GAAA,EAAA,OADA;AACA;AACA,QAAA,IAAA,EAAA,KAAA,CAAA,UAFA,CAEA;;AAFA,OAAA,CAAA;AAIA,UAAA,QAAA,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,YAAA,EAAA,YAAA,CAAA;AACA,MAAA,QAAA,CAAA,IAAA,GAAA,IAAA;AACA,MAAA,QAAA,CAAA,QAAA,CAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA;AACA,aAAA,UAAA;AACA,KAnJA;AAqJA,IAAA,OArJA,qBAqJA;AAAA;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,KAAA,KAAA,EAAA,KAAA,MAAA,EADA,CACA;;AACA,WAAA,KAAA,CAAA,MAAA,GAFA,CAEA;AACA,KAxJA;AA0JA,IAAA,eA1JA,2BA0JA,KA1JA,EA0JA;AAAA;;AAAA;AACA;AACA,UAAA,UAAA,GAAA,KAAA,aAAA,CAAA,KAAA,CAAA;;AACA,UAAA,UAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AAAA;AAAA;AAAA;;AAAA;AACA,+BAAA,UAAA,8HAAA;AAAA,gBAAA,IAAA;;AACA,gBAAA,IAAA,CAAA,MAAA,CAAA,IAAA,IAAA,EAAA,EAAA;AAAA;AACA,mBAAA,MAAA,CAAA,MAAA,GAAA,IAAA,CADA,CACA;;AACA,mBAAA,QAAA,CAAA,SAAA,EAAA,IAAA,EAAA;AACA,gBAAA,iBAAA,EAAA,IADA;AAEA,gBAAA,gBAAA,EAAA,IAFA;AAGA,gBAAA,IAAA,EAAA;AAHA,eAAA,EAIA,IAJA,CAIA,YAAA;AACA,gBAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,KAAA,CADA,CACA;;AACA,oBAAA,IAAA,CAAA,MAAA,CAAA,IAAA,IAAA,IAAA,EAAA;AACA,kBAAA,KAAA,CAAA,WAAA,CAAA,OAAA,EADA,CACA;;AACA,iBAFA,MAEA,IAAA,IAAA,CAAA,MAAA,CAAA,IAAA,IAAA,IAAA,EAAA;AACA,kBAAA,KAAA,CAAA,WAAA,CAAA,WAAA,EADA,CACA;;AACA;AACA,eAXA,EAWA,KAXA,CAWA,YAAA;AACA,gBAAA,KAAA,CAAA,MAAA,CAAA,MAAA,GAAA,KAAA,CADA,CACA;AACA,eAbA;AAcA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA,OArBA,MAqBA,CAAA;AACA;AACA,KApLA;AAsLA,IAAA,WAtLA,uBAsLA,IAtLA,EAsLA;AAAA;;AACA,UAAA,GAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA;AACA,UAAA,UAAA,GAAA,EAAA;AACA,UAAA,aAAA,GAAA,IAAA,KAAA,CAAA,aAAA,EAAA,CAJA,CAIA;;AACA,UAAA,IAAA,IAAA,OAAA,EAAA;AACA,QAAA,GAAA,GAAA,aAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,CADA,CACA;;AACA,QAAA,UAAA,GAAA,KAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAEA;;AACA,QAAA,KAAA,GAAA,IAAA;AACA,OAJA,MAIA,IAAA,IAAA,IAAA,WAAA,EAAA;AAAA;AACA,QAAA,GAAA,GAAA,aAAA,CAAA,IAAA,CAAA,OAAA,CAAA,wBAAA,CAAA,CAAA,CADA,CACA;;AACA,QAAA,UAAA,GAAA,KAAA,UAAA,CAAA,IAAA,CAAA,CAFA,CAEA;;AACA,QAAA,KAAA,GAAA,IAAA;AACA;;AAbA;AAAA;AAAA;;AAAA;AAeA,8BAAA,KAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,mIAAA;AAAA,cAAA,IAAA;;AACA,cAAA,IAAA,CAAA,IAAA,IAAA,MAAA,EAAA;AAAA;AACA,gBAAA,QAAA,GAAA,IAAA,KAAA,CAAA,mBAAA,CAAA;AACA,cAAA,GAAA,EAAA,GADA;AACA;AACA,cAAA,IAAA,EAAA,KAAA,CAAA,UAFA,CAEA;;AAFA,aAAA,CAAA;AAIA,YAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AACA,WANA,MAMA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,CAAA,IAAA,IAAA,IAAA,EAAA;AACA,gBAAA,OAAA,GAAA,IAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA;AACA,gBAAA,YAAA,GAAA,IAAA,KAAA,CAAA,iBAAA,CAAA;AACA,cAAA,GAAA,EAAA,OADA;AACA;AACA,cAAA,IAAA,EAAA,KAAA,CAAA,UAFA,CAEA;;AAFA,aAAA,CAAA;AAKA,YAAA,IAAA,CAAA,IAAA,GAAA,KAAA,CAPA,CAOA;;AACA,YAAA,IAAA,CAAA,QAAA,GAAA,YAAA;AACA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkCA,MAAA,UAAA,CAAA,YAAA;AAAA;AACA,QAAA,MAAA,CAAA,OAAA;AACA,OAFA,EAEA,GAFA,CAAA;AAIA,KA5NA;AA8NA,IAAA,aA9NA,yBA8NA,KA9NA,EA8NA;AAAA;AACA,MAAA,KAAA,CAAA,cAAA,GADA,CAEA;;AACA,UAAA,SAAA,GAAA,IAAA,KAAA,CAAA,SAAA,EAAA,CAHA,CAGA;;AACA,UAAA,KAAA,GAAA,IAAA,KAAA,CAAA,OAAA,EAAA;AACA,UAAA,SAAA,GAAA,KAAA,KAAA,CAAA,QAAA;AACA,UAAA,qBAAA,GAAA,SAAA,CAAA,qBAAA,EAAA,CANA,CAOA;;AACA,MAAA,KAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,OAAA,GAAA,qBAAA,CAAA,IAAA,IAAA,SAAA,CAAA,WAAA,GAAA,CAAA,GAAA,CAAA;AACA,MAAA,KAAA,CAAA,CAAA,GAAA,EAAA,CAAA,KAAA,CAAA,OAAA,GAAA,qBAAA,CAAA,GAAA,IAAA,SAAA,CAAA,YAAA,IAAA,CAAA,GAAA,CAAA,CATA,CAUA;;AACA,MAAA,SAAA,CAAA,aAAA,CAAA,KAAA,EAAA,KAAA,MAAA,EAXA,CAYA;;AACA,UAAA,UAAA,GAAA,SAAA,CAAA,gBAAA,CAAA,KAAA,KAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,CAAA,CAbA,CAcA;;AACA,aAAA,UAAA;AACA;AA9OA;AA3BA,CAAA","sourcesContent":["<template>\n\t<div class=\"homePage\">\n\t\t<el-card class=\"card\">\n\t\t\t<div slot=\"header\">\n\t\t\t\t<div class=\"card-title\">\n\t\t\t\t\t<span>简易版全景图</span>\n\n\t\t\t\t\t<div class=\"card-property\">\n\t\t\t\t\t\t<span ref='property'></span>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"card-content\">\n\t\t\t\t<div ref='threeDom' class=\"model\"></div>\n\t\t\t\t<div class=\"control\">\n\t\t\t\t\t<span class=\"control-title\">控制台</span>\n\t\t\t\t\t<div class=\"control-block\">\n\t\t\t\t\t\t<span class=\"control-block-title\">是否自动旋转</span>\n\t\t\t\t\t\t<el-radio-group v-model=\"isRotate\" @change=\"isSpin\">\n\t\t\t\t\t\t\t<el-radio :label=\"1\">开启</el-radio>\n\t\t\t\t\t\t\t<el-radio :label=\"0\">关闭</el-radio>\n\t\t\t\t\t\t</el-radio-group>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</el-card>\n\t</div>\n</template>\n\n<script>\n\timport axios from 'axios';\n\timport * as THREE from \"three\";\n\timport * as TrackballControls from 'three-trackballcontrols'\n\timport * as ThreeStats from 'three-stats'\n\timport { OBJLoader, MTLLoader } from 'three-obj-mtl-loader';\n\tconst OrbitControls = require('three-orbit-controls')(THREE);\n\n\texport default {\n\t\tprops: {\n\t\t\tmsg: String\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\trenderer: '', //渲染器\n\t\t\t\tscene: '', //场景\n\t\t\t\tlight: '', //光源\n\t\t\t\tcamera: '', //相机\n\t\t\t\tcontrols: '', //控制器\n\t\t\t\tstats: '', //性能监控器\n\t\t\t\tmygroup: '', //模型组\n\n\t\t\t\taction: '', //控制动画的值\n\t\t\t\tclock: '', //时钟\n\t\t\t\tmixer: '', //混合实例\n\t\t\t\trotateAnimate: '', //旋转动画\n\t\t\t\tisRotate: 1, //是否开启旋转\n\n\t\t\t}\n\t\t},\n\n\t\tmounted() {\n\t\t\tthis.init(); //初始化\n\t\t},\n\n\t\tmethods: {\n\t\t\tinit() {\n\t\t\t\tthis.$refs.threeDom.addEventListener('dblclick', this.onMouseDblclick); //监听双击事件\n\t\t\t\tthis.rendererInit(); //创建渲染器\n\t\t\t\tthis.sceneInit(); //创建场景    包含光源和辅助坐标系\n\t\t\t\tthis.cameraInit(); //创建相机\n\t\t\t\tthis.controlInit(); //初始化控制器\n\t\t\t\tthis.propertyInit(); //性能监控\n\t\t\t\tthis.modelling(); //建立模型\n\t\t\t},\n\n\t\t\tmodelling(){ //开始建立模型\n\t\t\t\tthis.mygroup = new THREE.Group();\n\n\t\t\t\tvar textureLoader = new THREE.TextureLoader(); //创建纹理贴图\t\t\n\t\t\t\t//从服务器上取得图片\n\t\t\t\t// var link='http://192.168.0.170:9001/haems-web/modules/web/images/%E6%AD%A3%E9%9D%A2.png';\t\n\t\t\t\t//vue加载图表需要用 require形式 从本地取,直接取本地是无法应用上的因为load只支持http协议 打包后变为file协议是无法使用的\n\t\t\t\t//所以必须取服务上的图片 然后在vue.config中配置跨域\n\t\t\t\tvar img = textureLoader.load(require('@/assets/img/home3.jpg'));\n\t\t\t\t//var img = textureLoader.load(link); //vue加载图表需要用 require形式\n\n\t\t\t\tvar geometry = new THREE.SphereGeometry(130, 256, 256); // 球体网格模型\n\t\t\t\tvar material = new THREE.MeshLambertMaterial({\n\t\t\t\t\tmap: img, //设置颜色贴图属性值\n\t\t\t\t\tside: THREE.DoubleSide, //双面渲染\n\t\t\t\t});\n\t\t\t\tvar meshSphere = new THREE.Mesh(geometry, material); //网格模型对象Mesh\t\n\t\t\t\tmeshSphere.name = '球体容器';\n\t\t\t\tthis.mygroup.add(meshSphere);\n\n\t\t\t\tvar canvasText = this.getcanvers('进门'); //生成一个canvers 文字图案对象\n\t\t\t\tvar texture = new THREE.CanvasTexture(canvasText);\n\t\t\t\tvar geometryText = new THREE.PlaneGeometry(16, 10, 60, 60);\n\t\t\t\tvar materialText = new THREE.MeshPhongMaterial({\n\t\t\t\t\tmap: texture, // 设置纹理贴图\n\t\t\t\t\tside: THREE.DoubleSide, //双面渲染\n\t\t\t\t});\n\t\t\t\tvar meshText = new THREE.Mesh(geometryText, materialText);\n\t\t\t\tmeshText.name = '进门';\n\t\t\t\tmeshText.position.set(40, 20, -90)\n\t\t\t\tthis.mygroup.add(meshText);\n\n\t\t\t\tthis.scene.add(this.mygroup);\n\t\t\t\tthis.addAnimation(); //添加并开启动画\n\t\t\t\tthis.refresh();\n\t\t\t},\n\n\t\t\tisSpin(val) { //开启和关闭旋转\n\t\t\t\tif (val == 0) { //关闭控制台\t\t\n\t\t\t\t\tthis.action.paused = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.action.paused = false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\taddAnimation() { //添加并开启动画\n\t\t\t\tthis.clock = new THREE.Clock(); // three.js 时钟对象\n\t\t\t\tvar times = [0, 3600]; //\t创建帧动画序列\n\t\t\t\tvar position_x = [0, 360]; //离散属性值\n\t\t\t\tvar keyframe = new THREE.KeyframeTrack('meshSphere.rotation[y]', times, position_x);\n\t\t\t\tvar duration = 100; //持续时间\n\t\t\t\tvar cilp = new THREE.AnimationClip('sphereRotate', duration, [keyframe]); //剪辑 keyframe对象\n\t\t\t\tthis.mixer = new THREE.AnimationMixer(this.mygroup); //动画混合实例\n\t\t\t\tthis.action = this.mixer.clipAction(cilp);\n\t\t\t\tthis.action.timeScale = 1; //播放速度\n\t\t\t\tthis.action.setLoop(THREE.LoopPingPong).play(); //开始播放 像乒乓球一样在起始点与结束点之间来回循环\n\t\t\t\tthis.animate(); //开启动画\n\t\t\t},\n\n\t\t\tanimate() { //循环渲染\n\t\t\t\tthis.rotateAnimate = requestAnimationFrame(this.animate);\n\t\t\t\tthis.renderer.render(this.scene, this.camera);\n\t\t\t\tthis.update();\n\t\t\t},\n\n\t\t\tupdate() { //数据更新\n\t\t\t\tthis.stats.update();\n\t\t\t\tthis.mixer.update(this.clock.getDelta());\n\t\t\t},\n\n\t\t\trendererInit() { //初始化渲染器\n\t\t\t\tvar width = 1000; //窗口宽度\n\t\t\t\tvar height = 800; //窗口高度\n\t\t\t\tthis.renderer = new THREE.WebGLRenderer(); //创建渲染器\n\t\t\t\tthis.renderer.setClearColor(0xffffff); //添加背景颜色\n\t\t\t\tthis.renderer.setSize(width, height); // 设定渲染器尺寸\n\t\t\t\tthis.$refs.threeDom.appendChild(this.renderer.domElement);\n\t\t\t},\n\n\t\t\tsceneInit() { //初始化场景 并向场景添加光源和辅助坐标系\n\t\t\t\tthis.scene = new THREE.Scene();\n\t\t\t\tvar ambient = new THREE.AmbientLight(0x444444, 3); //添加光源  颜色和光照强度\n\t\t\t\tvar axisHelper = new THREE.AxesHelper(600); //添加辅助坐标系\n\t\t\t\taxisHelper.visible = false;// 新加的\n\t\t\t\tthis.scene.add(ambient, axisHelper);\n\t\t\t},\n\n\t\t\tcameraInit() { //初始化相机\n\t\t\t\tvar width = 800; //窗口宽度\n\t\t\t\tvar height = 800; //窗口高度\n\t\t\t\tthis.camera = new THREE.PerspectiveCamera(90, width / height, 1, 1000); //使用透视相机\n\t\t\t\tthis.camera.position.set(0, 0, 10); //设置相机位置\n\t\t\t\tthis.camera.lookAt(new THREE.Vector3(0, 0, 0)); // 相机看向\n\t\t\t},\n\n\t\t\tcontrolInit() { //初始化控制器\n\t\t\t\tthis.controls = new OrbitControls(this.camera, this.$refs.threeDom); // 初始化控制器\n\t\t\t\tthis.controls.target.set(0, 0, 0); // 设置控制器的焦点，使控制器围绕这个焦点进行旋转\n\t\t\t\tthis.controls.minDistance = 10; // 设置移动的最短距离（默认为零）\n\t\t\t\tthis.controls.maxPolarAngle = Math.PI; //绕垂直轨道的距离（范围是0-Math.PI,默认为Math.PI）\n\t\t\t    this.controls.maxDistance = 30; // 设置移动的最长距离（默认为无穷）\n\t\t\t\tthis.controls.enablePan = false; //禁用右键功能\n\t\t\t\tthis.controls.addEventListener('change', this.refresh); //监听鼠标、键盘事件 让整个控件可以拖动\n\t\t\t},\n\n\t\t\tpropertyInit() { //初始化性能监控\n\t\t\t\tthis.stats = new ThreeStats.Stats(); // 创建一个性能监视器\t\n\t\t\t\tthis.stats.dom.style.position = 'absolute';\n\t\t\t\tthis.stats.dom.style.top = '-4px';\n\t\t\t\tthis.$refs.property.appendChild(this.stats.dom);\n\t\t\t\tthis.stats.update();\n\t\t\t},\n\n\t\t\tgetcanvers(text) { //生成一个canvers图案\n\t\t\t\tvar canvasText = document.createElement(\"canvas\");\n\t\t\t\tvar c = canvasText.getContext('2d');\n\t\t\t\t// 矩形区域填充背景\n\t\t\t\tc.fillStyle = \"#FFFFFF\"; //canver背景\n\t\t\t\tc.fillRect(0, 0, 300, 200); //生成一个矩形\n\t\t\t\tc.translate(160, 80);\n\t\t\t\tc.fillStyle = \"#000000\"; //文本填充颜色\n\t\t\t\tc.font = \"bold 100px 宋体\"; //字体样式设置\n\t\t\t\tc.textBaseline = \"middle\"; //文本与\n\t\t\t\tc.textAlign = \"center\"; //文本居中\n\t\t\t\tc.fillText(text, 0, 0);\n\n\t\t\t\tvar texture = new THREE.CanvasTexture(canvasText); //Canvas纹理\n\t\t\t\tvar geometryText = new THREE.PlaneGeometry(16, 10, 60, 60); //生成一个矩形平面\n\t\t\t\tvar materialText = new THREE.MeshPhongMaterial({\n\t\t\t\t\tmap: texture, // 设置纹理贴图\n\t\t\t\t\tside: THREE.DoubleSide, //双面渲染\n\t\t\t\t});\n\t\t\t\tvar meshText = new THREE.Mesh(geometryText, materialText);\n\t\t\t\tmeshText.name = text;\n\t\t\t\tmeshText.position.set(40, 20, -90);\n\t\t\t\treturn canvasText;\n\t\t\t},\n\n\t\t\trefresh(){ //刷新页面 \n\t\t\t\tthis.renderer.render(this.scene, this.camera); //执行渲染操作\n\t\t\t\tthis.stats.update(); //更新性能监控的值\t\t\t\n\t\t\t},\n\n\t\t\tonMouseDblclick(event) { //触发双击事件\n\t\t\t\t// 获取 raycaster 和所有模型相交的数组，其中的元素按照距离排序，越近的越靠前\n\t\t\t\tvar intersects = this.getIntersects(event);\n\t\t\t\tif (intersects.length != 0) {\n\t\t\t\t\tfor (var item of intersects) {\n\t\t\t\t\t\tif (item.object.name != '') { //找到第一个不等于空的模型 就是自定义最近的模型\n\t\t\t\t\t\t\tthis.action.paused = true; //停止旋转\t\t\t\n\t\t\t\t\t\t\tthis.$confirm('是否切换场景?', '提示', {\n\t\t\t\t\t\t\t\tconfirmButtonText: '切换',\n\t\t\t\t\t\t\t\tcancelButtonText: '取消',\n\t\t\t\t\t\t\t\ttype: 'warning'\n\t\t\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\t\t\tthis.action.paused = false; //开启旋转\n\t\t\t\t\t\t\t\tif (item.object.name == '进门') {\n\t\t\t\t\t\t\t\t\tthis.changeScene('enter'); //改变页面场景\n\t\t\t\t\t\t\t\t} else if (item.object.name == '返回') {\n\t\t\t\t\t\t\t\t\tthis.changeScene('backtrack'); //改变页面场景\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}).catch(() => {\n\t\t\t\t\t\t\t\tthis.action.paused = false; //开启旋转\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { //这里是未选中状态\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tchangeScene(type) {\n\t\t\t\tvar img = '';\n\t\t\t\tvar names = '';\n\t\t\t\tvar canvasText = '';\n\t\t\t\tvar textureLoader = new THREE.TextureLoader(); //创建纹理贴图\t\t\n\t\t\t\tif (type == 'enter') {\n\t\t\t\t\timg = textureLoader.load(require(\"@/assets/img/home1.jpg\")); //vue加载图表需要用 require形式\n\t\t\t\t\tcanvasText = this.getcanvers('返回'); //生成一个canvers 文字图案对象\t\n\t\t\t\t\tnames = '返回';\n\t\t\t\t} else if (type == 'backtrack') { //返回房间\n\t\t\t\t\timg = textureLoader.load(require(\"@/assets/img/home3.jpg\")); //vue加载图表需要用 require形式\t\n\t\t\t\t\tcanvasText = this.getcanvers('进门'); //生成一个canvers 文字图案对象\t\n\t\t\t\t\tnames = '进门';\n\t\t\t\t}\n\n\t\t\t\tfor (var item of this.scene.children[2].children) {\n\t\t\t\t\tif (item.name == '球体容器') { //切换贴图 进入下一张贴图\t\t\t\t\t\n\t\t\t\t\t\tvar material = new THREE.MeshLambertMaterial({\n\t\t\t\t\t\t\tmap: img, //设置颜色贴图属性值\n\t\t\t\t\t\t\tside: THREE.DoubleSide, //双面渲染\n\t\t\t\t\t\t});\n\t\t\t\t\t\titem.material = material;\n\t\t\t\t\t} else if (item.name == '进门' || item.name == '返回') {\n\t\t\t\t\t\tvar texture = new THREE.CanvasTexture(canvasText);\n\t\t\t\t\t\tvar materialText = new THREE.MeshPhongMaterial({\n\t\t\t\t\t\t\tmap: texture, // 设置纹理贴图\n\t\t\t\t\t\t\tside: THREE.DoubleSide, //双面渲染\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\titem.name = names; //改名模型的名字\n\t\t\t\t\t\titem.material = materialText;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => { //延迟刷新\n\t\t\t\t\tthis.refresh();\n\t\t\t\t}, 100)\n\n\t\t\t},\n\n\t\t\tgetIntersects(event) { // 获取与射线相交的对象数组\n\t\t\t\tevent.preventDefault();\n\t\t\t\t// 声明 raycaster 和 mouse 变量\n\t\t\t\tvar raycaster = new THREE.Raycaster(); //生成射线\n\t\t\t\tvar mouse = new THREE.Vector2();\n\t\t\t\tvar container = this.$refs.threeDom;\n\t\t\t\tlet getBoundingClientRect = container.getBoundingClientRect();\n\t\t\t\t// 通过鼠标点击位置,计算出 raycaster 所需点的位置 分量,以屏幕为中心点,范围 -1 到 1\n\t\t\t\tmouse.x = ((event.clientX - getBoundingClientRect.left) / container.offsetWidth) * 2 - 1;\n\t\t\t\tmouse.y = -((event.clientY - getBoundingClientRect.top) / container.offsetHeight) * 2 + 1;\n\t\t\t\t//通过鼠标点击的位置(二维坐标)和当前相机的矩阵计算出射线位置\n\t\t\t\traycaster.setFromCamera(mouse, this.camera);\n\t\t\t\t// 获取与射线相交的对象数组，其中的元素按照距离排序，越近的越靠前\n\t\t\t\tvar intersects = raycaster.intersectObjects(this.scene.children[2].children);\n\t\t\t\t//返回选中的对象\n\t\t\t\treturn intersects;\n\t\t\t},\n\t\t}\n\t}\n</script>\n\n<style>\n.homePage {\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\tfont-size: 14px;\n\tcolor: #303133;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.card {\n\twidth: 100%;\n\theight: 900px;\n}\n\n.card-title {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n}\n\n.card-title span {\n\tfont-weight: 600;\n\tfont-size: 18px;\n}\n\n.card-property {\n\tposition: relative;\n\twidth: 50px;\n\theight: 40px;\n}\n\n\t.card-content {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n\t.model {\n\t\tborder: 1px solid #DCDFE6;\n\t}\n\n\t.control {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100px;\n\t\theight: 800px;\n\t\tborder: 1px solid #DCDFE6;\n\t\tborder-left: none;\n\t}\n\n\t.control-title {\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\ttext-align: center;\n\t\tcolor: #409EFF;\n\t\tpadding: 10px;\n\t\tborder-bottom: 1px solid #DCDFE6;\n\t}\n\n\t.control-block {\n\t\tpadding: 10px;\n\t\tborder-bottom: 1px solid #DCDFE6;\n\t}\n\n\t.control-block-title {\n\t\tdisplay: block;\n\t\tmargin-bottom: 5px;\n\t}\n\n\t/* 自定义element样式 */\n\t.el-card__header {\n\t\tpadding: 10px 20px;\n\t}\n</style>\n"],"sourceRoot":"src/view"}]}